name: ID My Team Server
on: [push]
jobs:
  test:
    runs-on: ubuntu-latest
    env:
      SECRET_KEY: a8r(%ir&!=7rc0ycu(=fwks1qc$#lsr34_5p7v+dbif7kh%1pn
      DJANGO_SETTINGS_MODULE: web.settings
    services:
      postgres:
        image: postgres
        env:
          POSTGRES_DATABASE: idmyteam
          POSTGRES_USER: idmyteam
          POSTGRES_PASSWORD: idmyteam
        ports:
          - 5432:5432
      redis:
        image: redis
        ports:
          - 6379:6379
    strategy:
      matrix:
        python-version: [3.8, 3.9]

    steps:
      - uses: actions/checkout@v1

      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v1
        with:
          python-version: ${{ matrix.python-version }}

      - name: Install requirements for web
        run: |
          pip install --upgrade pip
          cd web
          pip install -r requirements.txt
          pip install -r worker/requirements.txt
          pip install -r test_requirements.txt

      - uses: pre-commit/action@v2.0.0

      - name: Test web
        run: |
          cd web
          pytest --cov=./ --cov-report=xml

      - name: Upload web coverage to Codecov
        if: github.ref == 'refs/heads/master'
        uses: codecov/codecov-action@v1
        with:
          token: ${{ secrets.CODECOV_TOKEN }}
          file: ./web/coverage.xml

  publish-pypi:
    name: Publish PyPi
    needs: test
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/master'
    steps:
      - uses: actions/checkout@v2
        with:
          fetch-depth: '0'

      - name: Bump version and push tag
        id: version
        uses: anothrNick/github-tag-action@1.33.0
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          
      - name: Build dists
        run: |
          pip3 install setuptools
          sed -i -e "s/REPLACEDINCI/${{ steps.version.outputs.new_tag }}/g" web/idmyteam/idmyteam/__init__.py
          cd web/idmyteam/
          python3 setup.py sdist
          
      - name: Publish package to PyPI
        uses: pypa/gh-action-pypi-publish@master
        with:
          user: __token__
          password: ${{ secrets.PYPI_TOKEN }}
          verify_metadata: false
          verbose: true
          packages_dir: web/idmyteam/dist

  build:
    name: Publish Docker image
    needs: test
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@master
        with:
          fetch-depth: '0'

      - name: Publish to Docker Registry
        uses: docker/build-push-action@v1
        with:
          path: "web/"
          repository: ${{ github.repository }}
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}
          tag_with_ref: true
          tag_with_sha: true
          build_args: COMMIT_HASH=${{ github.sha }}

  deploy:
    needs: build
    if: github.ref == 'refs/heads/master'
    runs-on: ubuntu-latest
    steps:
      - uses: azure/setup-helm@v1
      - uses: actions/checkout@master
        with:
          fetch-depth: '0'
      - name: Upgrade helm
        run: |
          # pull infra charts
          helm repo add maxisme https://${{ secrets.GH_PA_TOKEN }}@raw.githubusercontent.com/maxisme/infra/master/k8s/charts/
          helm repo update

          # create kube config
          mkdir ~/.kube
          echo "${{ secrets.B64_KUBE_CONFIG }}" | base64 --decode > ~/.kube/config

          # deploy helms
          repo="${{ github.repository }}"
          helm upgrade "${repo//./}" maxisme/web -f helm-values.yml --set="image.tag=sha-${GITHUB_SHA::7}" --atomic --timeout 120s

          # clean up
          rm ~/.kube/config
